"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customer = exports.RecurringTimeUnit = exports.Year = exports.Month = exports.Week = exports.removeBlankAttributes = exports.submitPayhereClientRequest = void 0;
const RecurringTimeUnit_1 = require("./RecurringTimeUnit");
Object.defineProperty(exports, "RecurringTimeUnit", { enumerable: true, get: function () { return RecurringTimeUnit_1.RecurringTimeUnit; } });
Object.defineProperty(exports, "Week", { enumerable: true, get: function () { return RecurringTimeUnit_1.Week; } });
Object.defineProperty(exports, "Month", { enumerable: true, get: function () { return RecurringTimeUnit_1.Month; } });
Object.defineProperty(exports, "Year", { enumerable: true, get: function () { return RecurringTimeUnit_1.Year; } });
const Customer_1 = require("./Customer");
Object.defineProperty(exports, "Customer", { enumerable: true, get: function () { return Customer_1.Customer; } });
const Payhere_1 = require("../Payhere");
const removeBlankAttributes = (obj) => {
    return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null));
};
exports.removeBlankAttributes = removeBlankAttributes;
// +
const submitPayhereClientRequest = (reqObject, requiredParams, endpoint, onError) => {
    if (!Payhere_1.Payhere.merchantId) {
        onError('Payhere is not initialized');
        return;
    }
    const form = window.document.createElement('form');
    form.setAttribute('action', Payhere_1.Payhere.baseUrl + endpoint);
    form.style.display = 'none';
    form.setAttribute('method', 'post');
    for (const name of Object.keys(reqObject)) {
        if (reqObject[name]) {
            const inpt = window.document.createElement('input');
            inpt.setAttribute('name', name);
            inpt.setAttribute('type', 'hidden');
            inpt.setAttribute('value', reqObject[name]);
            form.appendChild(inpt);
        }
        else {
            if (Object.keys(requiredParams).includes(name)) {
                onError(`Payhere Error: ${requiredParams[name]} is a required parameter`);
                return;
            }
        }
    }
    window.document.body.appendChild(form);
    form.submit();
};
exports.submitPayhereClientRequest = submitPayhereClientRequest;

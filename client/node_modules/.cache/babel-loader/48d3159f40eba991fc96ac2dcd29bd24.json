{"ast":null,"code":"import store from \"../Redux/store\";\nimport { fetch_user_data } from \"../Redux\";\nimport api from \"./api\";\nexport function LogIn() {\n  store.dispatch(fetch_user_data());\n}\n_c = LogIn;\nexport function LogOut() {\n  api().post(\"/logout\").then(res => {}).catch(error => {}).finally(() => {\n    store.dispatch(fetch_user_data());\n  });\n}\n_c2 = LogOut;\nexport function isLoggedIn(roles = null) {\n  const state = store.getState().currentUser;\n  const user_data = state.user_data;\n  let is2faRequired = false;\n  let userAuth = false;\n  let userRoleValidated = false;\n  if (user_data !== null && user_data.user !== null && user_data.user.id) state.is2faRequired ? is2faRequired = true : userAuth = true;\n\n  if (userAuth) {\n    if (roles !== undefined && roles !== null && roles.length !== 0) userRoleValidated = roleValidated(roles, user_data);else userRoleValidated = true;\n  }\n\n  return {\n    is2faRequired,\n    userAuth,\n    userRoleValidated\n  };\n}\n\nconst roleValidated = (roles, user_data) => {\n  let validated = false;\n\n  if (roles != null && user_data.roles != null) {\n    roles.forEach(role => {\n      user_data.roles.forEach(user_role => {\n        if (role === user_role.name) {\n          console.log(`Role: ${role}, ${user_role.name}`);\n          validated = true;\n        }\n      });\n    });\n  }\n\n  return validated;\n}; // const mapStateToProps = (state) => {\n//   return {\n//     userData: state.user_data,\n//     error: state.error,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     fetch_user_data: () => dispatch(fetch_user_data()),\n//   };\n// };\n// export const logIn = () => {\n//   Cookies.set(\"pizza_backend_is_user_logged_in\", true, {\n//     expires: 86400,\n//     sameSite: \"lax\",\n//   });\n// };\n// export const logOut = () => {\n//   if (typeof window !== \"undefined\") {\n//     // remove logged in user's cookie and redirect to login page\n//     Cookies.remove(\"pizza_backend_is_user_logged_in\", {\n//       expires: 86400,\n//       sameSite: \"lax\",\n//     });\n//   }\n// };\n// export const isLoggedIn = (reqCookies = null) => {\n//   // if we don't have request cookies, get the cookie from client\n//   if (!reqCookies) {\n//     return !!Cookies.get(\"pizza_backend_is_user_logged_in\");\n//   }\n//   // otherwise get cookie from server\n//   return !!cookie.parse(reqCookies).pizza_backend_is_user_logged_in;\n// };\n\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LogIn\");\n$RefreshReg$(_c2, \"LogOut\");","map":{"version":3,"sources":["F:/MANUKA YASAS/sliit_documents/semister5/AF/project/frontend/src/util/auth.js"],"names":["store","fetch_user_data","api","LogIn","dispatch","LogOut","post","then","res","catch","error","finally","isLoggedIn","roles","state","getState","currentUser","user_data","is2faRequired","userAuth","userRoleValidated","user","id","undefined","length","roleValidated","validated","forEach","role","user_role","name","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAAQC,eAAR,QAA+B,UAA/B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,OAAO,SAASC,KAAT,GAAiB;AACtBH,EAAAA,KAAK,CAACI,QAAN,CAAeH,eAAe,EAA9B;AACD;KAFeE,K;AAIhB,OAAO,SAASE,MAAT,GAAkB;AACvBH,EAAAA,GAAG,GACAI,IADH,CACQ,SADR,EAEGC,IAFH,CAESC,GAAD,IAAS,CAAE,CAFnB,EAGGC,KAHH,CAGUC,KAAD,IAAW,CAAE,CAHtB,EAIGC,OAJH,CAIW,MAAM;AACbX,IAAAA,KAAK,CAACI,QAAN,CAAeH,eAAe,EAA9B;AACD,GANH;AAOD;MAReI,M;AAUhB,OAAO,SAASO,UAAT,CAAoBC,KAAK,GAAG,IAA5B,EAAkC;AACvC,QAAMC,KAAK,GAAGd,KAAK,CAACe,QAAN,GAAiBC,WAA/B;AACA,QAAMC,SAAS,GAAGH,KAAK,CAACG,SAAxB;AAEA,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AAEA,MAAIH,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACI,IAAV,KAAmB,IAAzC,IAAiDJ,SAAS,CAACI,IAAV,CAAeC,EAApE,EACER,KAAK,CAACI,aAAN,GAAuBA,aAAa,GAAG,IAAvC,GAAgDC,QAAQ,GAAG,IAA3D;;AAEF,MAAIA,QAAJ,EAAc;AACZ,QAAIN,KAAK,KAAKU,SAAV,IAAuBV,KAAK,KAAK,IAAjC,IAAyCA,KAAK,CAACW,MAAN,KAAiB,CAA9D,EACEJ,iBAAiB,GAAGK,aAAa,CAACZ,KAAD,EAAQI,SAAR,CAAjC,CADF,KAEKG,iBAAiB,GAAG,IAApB;AACN;;AAED,SAAO;AAACF,IAAAA,aAAD;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA;AAA1B,GAAP;AACD;;AAED,MAAMK,aAAa,GAAG,CAACZ,KAAD,EAAQI,SAAR,KAAsB;AAC1C,MAAIS,SAAS,GAAG,KAAhB;;AACA,MAAIb,KAAK,IAAI,IAAT,IAAiBI,SAAS,CAACJ,KAAV,IAAmB,IAAxC,EAA8C;AAC5CA,IAAAA,KAAK,CAACc,OAAN,CAAeC,IAAD,IAAU;AACtBX,MAAAA,SAAS,CAACJ,KAAV,CAAgBc,OAAhB,CAAyBE,SAAD,IAAe;AACrC,YAAID,IAAI,KAAKC,SAAS,CAACC,IAAvB,EAA6B;AAC3BC,UAAAA,OAAO,CAACC,GAAR,CAAa,SAAQJ,IAAK,KAAIC,SAAS,CAACC,IAAK,EAA7C;AACAJ,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALD;AAMD,KAPD;AAQD;;AACD,SAAOA,SAAP;AACD,CAbD,C,CAeA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import store from \"../Redux/store\";\r\nimport {fetch_user_data } from \"../Redux\";\r\nimport api from \"./api\";\r\n\r\nexport function LogIn() {\r\n  store.dispatch(fetch_user_data());\r\n}\r\n\r\nexport function LogOut() {\r\n  api()\r\n    .post(\"/logout\")\r\n    .then((res) => {})\r\n    .catch((error) => {})\r\n    .finally(() => {\r\n      store.dispatch(fetch_user_data());\r\n    });\r\n}\r\n\r\nexport function isLoggedIn(roles = null) {\r\n  const state = store.getState().currentUser;\r\n  const user_data = state.user_data;\r\n\r\n  let is2faRequired = false;\r\n  let userAuth = false;\r\n  let userRoleValidated = false;\r\n\r\n  if (user_data !== null && user_data.user !== null && user_data.user.id)\r\n    state.is2faRequired ? (is2faRequired = true) : (userAuth = true);\r\n\r\n  if (userAuth) {\r\n    if (roles !== undefined && roles !== null && roles.length !== 0)\r\n      userRoleValidated = roleValidated(roles, user_data);\r\n    else userRoleValidated = true;\r\n  }\r\n\r\n  return {is2faRequired, userAuth, userRoleValidated };\r\n}\r\n\r\nconst roleValidated = (roles, user_data) => {\r\n  let validated = false;\r\n  if (roles != null && user_data.roles != null) {\r\n    roles.forEach((role) => {\r\n      user_data.roles.forEach((user_role) => {\r\n        if (role === user_role.name) {\r\n          console.log(`Role: ${role}, ${user_role.name}`);\r\n          validated = true;\r\n        }\r\n      });\r\n    });\r\n  }\r\n  return validated;\r\n};\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     userData: state.user_data,\r\n//     error: state.error,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     fetch_user_data: () => dispatch(fetch_user_data()),\r\n//   };\r\n// };\r\n\r\n// export const logIn = () => {\r\n//   Cookies.set(\"pizza_backend_is_user_logged_in\", true, {\r\n//     expires: 86400,\r\n//     sameSite: \"lax\",\r\n//   });\r\n// };\r\n\r\n// export const logOut = () => {\r\n//   if (typeof window !== \"undefined\") {\r\n//     // remove logged in user's cookie and redirect to login page\r\n//     Cookies.remove(\"pizza_backend_is_user_logged_in\", {\r\n//       expires: 86400,\r\n//       sameSite: \"lax\",\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export const isLoggedIn = (reqCookies = null) => {\r\n//   // if we don't have request cookies, get the cookie from client\r\n//   if (!reqCookies) {\r\n//     return !!Cookies.get(\"pizza_backend_is_user_logged_in\");\r\n//   }\r\n\r\n//   // otherwise get cookie from server\r\n//   return !!cookie.parse(reqCookies).pizza_backend_is_user_logged_in;\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}
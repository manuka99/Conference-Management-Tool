{"ast":null,"code":"import { FETCH_USER_SUCCESS, FETCH_USER_ERROR, FETCH_USER_REQUEST, USER_LOGIN, USER_2FA_REQUIRED, USER_LOGOUT, SET_APP_THEME } from \"./AuthUserActionTypes\";\nimport api from \"../../util/api\";\nexport const fetch_auth_user_data_success = userData => {\n  return {\n    type: FETCH_USER_SUCCESS,\n    payload: userData\n  };\n};\nexport const fetch_auth_user_data_error = error => {\n  return {\n    type: FETCH_USER_ERROR,\n    payload: error\n  };\n};\nexport const fetch_auth_user_data_request = () => {\n  return {\n    type: FETCH_USER_REQUEST\n  };\n};\nexport const user_login = () => {\n  return {\n    type: USER_LOGIN\n  };\n}; // 2fa is enabled and required\n\nexport const user_2fa = () => {\n  return {\n    type: USER_2FA_REQUIRED\n  };\n};\nexport const user_logout = () => {\n  return {\n    type: USER_LOGOUT\n  };\n};\nexport const set_app_theme = theme => {\n  return {\n    type: SET_APP_THEME,\n    payload: theme\n  };\n}; //side effects\n\nexport const fetch_user_data = () => {\n  return dispatch => {\n    dispatch(fetch_auth_user_data_request());\n    api().get(\"/redux/user\").then(res => {\n      const payload = {\n        user: res.data.user,\n        roles: res.data.roles\n      };\n      dispatch(fetch_auth_user_data_success(payload));\n      if (payload.user !== null && payload.user.id) payload.user.prompt2fa ? dispatch(user_2fa()) : dispatch(user_login());else dispatch(user_logout());\n    }).catch(error => {\n      if (error.response) {\n        if (error.response.status === 500) dispatch(fetch_auth_user_data_error(\"User must log in to access protected features.\"));else dispatch(fetch_auth_user_data_error(error.message));\n      } else if (error.request) {// The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log(\"Error\", error.message);\n        dispatch(fetch_auth_user_data_error(error.message));\n      }\n\n      console.log(error.config);\n    });\n  };\n};","map":{"version":3,"sources":["F:/MANUKA YASAS/sliit_documents/semister5/AF/project/frontend/src/Redux/AuthUser/AuthUserActions.js"],"names":["FETCH_USER_SUCCESS","FETCH_USER_ERROR","FETCH_USER_REQUEST","USER_LOGIN","USER_2FA_REQUIRED","USER_LOGOUT","SET_APP_THEME","api","fetch_auth_user_data_success","userData","type","payload","fetch_auth_user_data_error","error","fetch_auth_user_data_request","user_login","user_2fa","user_logout","set_app_theme","theme","fetch_user_data","dispatch","get","then","res","user","data","roles","id","prompt2fa","catch","response","status","message","request","console","log","config"],"mappings":"AAAA,SACEA,kBADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEC,UAJF,EAKEC,iBALF,EAMEC,WANF,EAOEC,aAPF,QAQO,uBARP;AASA,OAAOC,GAAP,MAAgB,gBAAhB;AAEA,OAAO,MAAMC,4BAA4B,GAAIC,QAAD,IAAc;AACxD,SAAO;AACLC,IAAAA,IAAI,EAAEV,kBADD;AAELW,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,0BAA0B,GAAIC,KAAD,IAAW;AACnD,SAAO;AACLH,IAAAA,IAAI,EAAET,gBADD;AAELU,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,4BAA4B,GAAG,MAAM;AAChD,SAAO;AACLJ,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMa,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLL,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMa,QAAQ,GAAG,MAAM;AAC5B,SAAO;AACLN,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMa,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLP,IAAAA,IAAI,EAAEL;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMa,aAAa,GAAIC,KAAD,IAAW;AACtC,SAAO;AACLT,IAAAA,IAAI,EAAEJ,aADD;AAELK,IAAAA,OAAO,EAAEQ;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACP,4BAA4B,EAA7B,CAAR;AACAP,IAAAA,GAAG,GACAe,GADH,CACO,aADP,EAEGC,IAFH,CAESC,GAAD,IAAS;AACb,YAAMb,OAAO,GAAG;AACdc,QAAAA,IAAI,EAAED,GAAG,CAACE,IAAJ,CAASD,IADD;AAEdE,QAAAA,KAAK,EAAEH,GAAG,CAACE,IAAJ,CAASC;AAFF,OAAhB;AAIAN,MAAAA,QAAQ,CAACb,4BAA4B,CAACG,OAAD,CAA7B,CAAR;AACA,UAAIA,OAAO,CAACc,IAAR,KAAiB,IAAjB,IAAyBd,OAAO,CAACc,IAAR,CAAaG,EAA1C,EACEjB,OAAO,CAACc,IAAR,CAAaI,SAAb,GACIR,QAAQ,CAACL,QAAQ,EAAT,CADZ,GAEIK,QAAQ,CAACN,UAAU,EAAX,CAFZ,CADF,KAIKM,QAAQ,CAACJ,WAAW,EAAZ,CAAR;AACN,KAbH,EAcGa,KAdH,CAcUjB,KAAD,IAAW;AAChB,UAAIA,KAAK,CAACkB,QAAV,EAAoB;AAClB,YAAIlB,KAAK,CAACkB,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EACEX,QAAQ,CACNT,0BAA0B,CACxB,gDADwB,CADpB,CAAR,CADF,KAMKS,QAAQ,CAACT,0BAA0B,CAACC,KAAK,CAACoB,OAAP,CAA3B,CAAR;AACN,OARD,MAQO,IAAIpB,KAAK,CAACqB,OAAV,EAAmB,CACxB;AACA;AACA;AACD,OAJM,MAIA;AACL;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBvB,KAAK,CAACoB,OAA3B;AACAZ,QAAAA,QAAQ,CAACT,0BAA0B,CAACC,KAAK,CAACoB,OAAP,CAA3B,CAAR;AACD;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAK,CAACwB,MAAlB;AACD,KAjCH;AAkCD,GApCD;AAqCD,CAtCM","sourcesContent":["import {\r\n  FETCH_USER_SUCCESS,\r\n  FETCH_USER_ERROR,\r\n  FETCH_USER_REQUEST,\r\n  USER_LOGIN,\r\n  USER_2FA_REQUIRED,\r\n  USER_LOGOUT,\r\n  SET_APP_THEME,\r\n} from \"./AuthUserActionTypes\";\r\nimport api from \"../../util/api\";\r\n\r\nexport const fetch_auth_user_data_success = (userData) => {\r\n  return {\r\n    type: FETCH_USER_SUCCESS,\r\n    payload: userData,\r\n  };\r\n};\r\n\r\nexport const fetch_auth_user_data_error = (error) => {\r\n  return {\r\n    type: FETCH_USER_ERROR,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const fetch_auth_user_data_request = () => {\r\n  return {\r\n    type: FETCH_USER_REQUEST,\r\n  };\r\n};\r\n\r\nexport const user_login = () => {\r\n  return {\r\n    type: USER_LOGIN,\r\n  };\r\n};\r\n\r\n// 2fa is enabled and required\r\nexport const user_2fa = () => {\r\n  return {\r\n    type: USER_2FA_REQUIRED,\r\n  };\r\n};\r\n\r\nexport const user_logout = () => {\r\n  return {\r\n    type: USER_LOGOUT,\r\n  };\r\n};\r\n\r\nexport const set_app_theme = (theme) => {\r\n  return {\r\n    type: SET_APP_THEME,\r\n    payload: theme,\r\n  };\r\n};\r\n\r\n//side effects\r\nexport const fetch_user_data = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetch_auth_user_data_request());\r\n    api()\r\n      .get(\"/redux/user\")\r\n      .then((res) => {\r\n        const payload = {\r\n          user: res.data.user,\r\n          roles: res.data.roles,\r\n        };\r\n        dispatch(fetch_auth_user_data_success(payload));\r\n        if (payload.user !== null && payload.user.id)\r\n          payload.user.prompt2fa\r\n            ? dispatch(user_2fa())\r\n            : dispatch(user_login());\r\n        else dispatch(user_logout());\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          if (error.response.status === 500)\r\n            dispatch(\r\n              fetch_auth_user_data_error(\r\n                \"User must log in to access protected features.\"\r\n              )\r\n            );\r\n          else dispatch(fetch_auth_user_data_error(error.message));\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log(\"Error\", error.message);\r\n          dispatch(fetch_auth_user_data_error(error.message));\r\n        }\r\n        console.log(error.config);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
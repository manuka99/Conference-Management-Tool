{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../Redux/store\";\nimport { fetch_user_data } from \"../Redux\";\nimport swal from \"sweetalert\";\nexport default function api(nonApi = false) {\n  const api = axios.create({\n    baseURL: `http://localhost:8000${nonApi ? \"\" : \"/api\"}`,\n    withCredentials: true\n  });\n  api.interceptors.response.use(response => response, error => {\n    //  const originalRequest = error.config;\n    if (error.response) {\n      if (error.response.status === 401) {\n        store.dispatch(fetch_user_data());\n      } else if (error.response.status === 403) {\n        //no required roles\n        swal(\"403: You do not have permision for the requested content.\");\n      } else if (error.response.status === 404) {\n        store.dispatch(change_redirect_route(\"/404\"));\n        return Promise.reject(error);\n      } else if (error.response.status === 419) {\n        swal(\"Unexpected error 419: Refresh the webpage and try again\");\n      } else if (error.response.status === 422) {\n        //errors in form submit\n        return Promise.reject(error);\n      } else if (error.response.status === 423) {\n        //password confirmation\n        return Promise.reject(error);\n      } else if (error.response.status === 500) {\n        if (error.response.data.message) swal(error.response.data.message);else swal(error.message);\n        return Promise.reject(error);\n      } else {\n        swal(error.message);\n        return Promise.reject(error);\n      }\n    } else {\n      swal(error.message);\n      return Promise.reject(error);\n    }\n\n    return Promise.reject(error);\n  });\n  return api;\n}","map":{"version":3,"sources":["F:/MANUKA YASAS/sliit_documents/semister5/AF/project/frontend/src/util/api.js"],"names":["axios","store","fetch_user_data","swal","api","nonApi","create","baseURL","withCredentials","interceptors","response","use","error","status","dispatch","change_redirect_route","Promise","reject","data","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,eAAe,SAASC,GAAT,CAAaC,MAAM,GAAG,KAAtB,EAA6B;AAC1C,QAAMD,GAAG,GAAGJ,KAAK,CAACM,MAAN,CAAa;AACvBC,IAAAA,OAAO,EAAG,wBAAuBF,MAAM,GAAG,EAAH,GAAQ,MAAO,EAD/B;AAEvBG,IAAAA,eAAe,EAAE;AAFM,GAAb,CAAZ;AAKAJ,EAAAA,GAAG,CAACK,YAAJ,CAAiBC,QAAjB,CAA0BC,GAA1B,CACGD,QAAD,IAAcA,QADhB,EAEGE,KAAD,IAAW;AACT;AACA,QAAIA,KAAK,CAACF,QAAV,EAAoB;AAClB,UAAIE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACjCZ,QAAAA,KAAK,CAACa,QAAN,CAAeZ,eAAe,EAA9B;AACD,OAFD,MAEO,IAAIU,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACxC;AACAV,QAAAA,IAAI,CAAC,2DAAD,CAAJ;AACD,OAHM,MAGA,IAAIS,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACxCZ,QAAAA,KAAK,CAACa,QAAN,CAAeC,qBAAqB,CAAC,MAAD,CAApC;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,OAHM,MAGA,IAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACxCV,QAAAA,IAAI,CAAC,yDAAD,CAAJ;AACD,OAFM,MAEA,IAAIS,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACxC;AACA,eAAOG,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,OAHM,MAGA,IAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACxC;AACA,eAAOG,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,OAHM,MAGA,IAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACxC,YAAID,KAAK,CAACF,QAAN,CAAeQ,IAAf,CAAoBC,OAAxB,EAAiChB,IAAI,CAACS,KAAK,CAACF,QAAN,CAAeQ,IAAf,CAAoBC,OAArB,CAAJ,CAAjC,KACKhB,IAAI,CAACS,KAAK,CAACO,OAAP,CAAJ;AACL,eAAOH,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,OAJM,MAIA;AACLT,QAAAA,IAAI,CAACS,KAAK,CAACO,OAAP,CAAJ;AACA,eAAOH,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD;AACF,KAzBD,MAyBO;AACLT,MAAAA,IAAI,CAACS,KAAK,CAACO,OAAP,CAAJ;AACA,aAAOH,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD;;AACD,WAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,GAlCH;AAqCA,SAAOR,GAAP;AACD","sourcesContent":["import axios from \"axios\";\r\nimport store from \"../Redux/store\";\r\nimport { fetch_user_data } from \"../Redux\";\r\nimport swal from \"sweetalert\";\r\n\r\nexport default function api(nonApi = false) {\r\n  const api = axios.create({\r\n    baseURL: `http://localhost:8000${nonApi ? \"\" : \"/api\"}`,\r\n    withCredentials: true,\r\n  });\r\n\r\n  api.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      //  const originalRequest = error.config;\r\n      if (error.response) {\r\n        if (error.response.status === 401) {\r\n          store.dispatch(fetch_user_data());\r\n        } else if (error.response.status === 403) {\r\n          //no required roles\r\n          swal(\"403: You do not have permision for the requested content.\");\r\n        } else if (error.response.status === 404) {\r\n          store.dispatch(change_redirect_route(\"/404\"));\r\n          return Promise.reject(error);\r\n        } else if (error.response.status === 419) {\r\n          swal(\"Unexpected error 419: Refresh the webpage and try again\");\r\n        } else if (error.response.status === 422) {\r\n          //errors in form submit\r\n          return Promise.reject(error);\r\n        } else if (error.response.status === 423) {\r\n          //password confirmation\r\n          return Promise.reject(error);\r\n        } else if (error.response.status === 500) {\r\n          if (error.response.data.message) swal(error.response.data.message);\r\n          else swal(error.message);\r\n          return Promise.reject(error);\r\n        } else {\r\n          swal(error.message);\r\n          return Promise.reject(error);\r\n        }\r\n      } else {\r\n        swal(error.message);\r\n        return Promise.reject(error);\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  return api;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}